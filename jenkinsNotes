Jenkins Set up:

Create an ec2 Instance or use the same instance used in GIT sessions.

Become root user

sudo su -

If git is not present:

Git installation:
yum install git -y

SEE THAT YOU ARE IN ROOT DIRECTORY
# cd
# pwd
************************************
JAVA Installation

SEE THAT YOU ARE IN ROOT DIRECTORY

# sudo amazon-linux-extras install java-openjdk11
-----
tar zxvf jdk-11.0.20_linux-x64_bin.tar.gz

sudo vim /etc/profile
#add
export JAVA_HOME=/home/ec2-user/jdk-11.0.20
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar

-------
below documents can be followed from AWS to install JAVA 11 in EC2 instance.

https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/amazon-linux-install.html

sudo yum install java-11-amazon-corretto-devel

[root@ip-172-31-37-159 ~]# sudo yum install java-11-amazon-corretto-devel
[root@ip-172-31-37-159 ~]# java --version
openjdk 11.0.20.1 2023-08-22 LTS
OpenJDK Runtime Environment Corretto-11.0.20.9.1 (build 11.0.20.1+9-LTS)
OpenJDK 64-Bit Server VM Corretto-11.0.20.9.1 (build 11.0.20.1+9-LTS, mixed mode)
[root@ip-172-31-37-159 ~]# systemctl start jenkins
[root@ip-172-31-37-159 ~]# systemctl status jenkins
● jenkins.service - Jenkins Continuous Integration Server
     Loaded: loaded (/usr/lib/systemd/system/jenkins.service; disabled; preset:>
     Active: active (running) since Thu 2023-10-19 16:20:16 UTC; 10s ago
   Main PID: 43283 (java)
      Tasks: 43 (limit: 1114)
     Memory: 375.1M
        CPU: 42.942s
     CGroup: /system.slice/jenkins.service
             └─43283 /usr/bin/java -Djava.awt.headless=true -jar /usr/share/jav>

Oct 19 16:19:43 ip-172-31-37-159.us-east-2.compute.internal jenkins[43283]: b2b>
Oct 19 16:19:43 ip-172-31-37-159.us-east-2.compute.internal jenkins[43283]: Thi>
Oct 19 16:19:43 ip-172-31-37-159.us-east-2.compute.internal jenkins[43283]: ***>
Oct 19 16:19:43 ip-172-31-37-159.us-east-2.compute.internal jenkins[43283]: ***>
Oct 19 16:19:43 ip-172-31-37-159.us-east-2.compute.internal jenkins[43283]: ***>
Oct 19 16:20:16 ip-172-31-37-159.us-east-2.compute.internal jenkins[43283]: 202>
Oct 19 16:20:16 ip-172-31-37-159.us-east-2.compute.internal jenkins[43283]: 202>
Oct 19 16:20:16 ip-172-31-37-159.us-east-2.compute.internal systemd[1]: Started>
Oct 19 16:20:16 ip-172-31-37-159.us-east-2.compute.internal jenkins[43283]: 202>
Oct 19 16:20:16 ip-172-31-37-159.us-east-2.compute.internal jenkins[43283]: 202>
lines 1-20/20 (END)

----------------------------------------------------------------
https://stackoverflow.com/questions/10268583/downloading-java-jdk-on-linux-via-wget-is-shown-license-page-instead

On the browser open https://www.jenkins.io/

Go to downloads section

Select centos OS

Go to Ec2 machine and execute commands:

  sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
  sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
  yum install jenkins -y

Execute command to start jenkins server:

systemctl start jenkins


systemctl status jenkins

Installation is complete on the server




If your jenkins is not starting and is failed with error: 
*************************************************************
Failed to start jenkins.service: The name org.freedesktop.PolicyKit1 was not provided by any .service files
See system logs and 'systemctl status jenkins.service' for details.

Then install java 11 and restart jenkins

For this execute the following command

sudo amazon-linux-extras install java-openjdk11

After this execute below command:

alternatives --config java

It will show you 2 versions of java on your machine:

FOR 

Enter to keep the current selection[+], or type selection number

Give integer 2 

Restart jenkins

Systemctl restart jenkins

********************************

* what is the home dir of jenkins
[root@ip-172-31-37-159 ~]# cd /var/lib/jenkins/


We need to now  set up jenkins dashboard

For this, take public ip address of ec2 server, copy it and go to your browser and give

publicipaddress:8080
3.136.160.21:8080
[root@ip-172-31-37-159 jenkins]# netstat -tulpn| grep -i 8080
tcp6       0      0 :::8080                 :::*                    LISTEN      43283/java
[root@ip-172-31-37-159 jenkins]#

On the ec2 server, execute below command

$ cat /var/lib/jenkins/secrets/initialAdminPassword

Copy the password and paste in the browser (jenkins)

Click on continue

Click on Jenkins suggested plugin tab(on left side)

On the next page

Username: admin
Password : admin
Retype password: admin
Email: admin@gmail.com

Click on continue

Click on finish

You will be on the jenkins dashboard

Day 2:
*******************
 How to integrate Jenkins with Github repository

> Connect to AWS ec2 machine- Start the server & start jenkins
> Execute command : 
 sudo su -
systemctl start jenkins
Go to browser : give public ip ofec2 server:8080
http://3.144.203.98:8080/

Demo 1: Create a Jenkisn job that will clone a github repository in jenkins workspace

Create a new job in jenkins
Click on + sign to create new item/job/project
Give a name to the job : CloneRepo
Select freestyle project and click on OK button
On the project click on Source code management
Select git option
Give git hub repo path
https://github.com/Sonal0409/myproject05Aug

Branch name as ===>  Master
[I spent a long time on this. The above comment "if I leave this field blank" worked like a charm. In SCM:
1) select Git
2) Name: origin
3) Refspec: +refs/pull/*:refs/remotes/origin/pr/*
4) Branches to build : leave blank

This solved the above error.]
* clone repo either public or private with credential
first we create ssh key
[root@ip-172-31-37-159 ~]# cd ~/.ssh
[root@ip-172-31-37-159 .ssh]# ls
authorized_keys
[root@ip-172-31-37-159 .ssh]# ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /root/.ssh/id_rsa
Your public key has been saved in /root/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:iNxIRYRIgcHIK34jhz4BSNYjdbv6ZXpusTEICoJpo/4 root@ip-172-31-37-159.us-east-2.compute.internal
The key's randomart image is:
+---[RSA 3072]----+
|=+=+ =+          |
|o*.oo..          |
|=.o o.           |
|O+ + +..         |
|O + =.+ S        |
|.* +.. +         |
|o =..  o=        |
| +  . ++         |
|  oE o+.         |
+----[SHA256]-----+
[root@ip-172-31-37-159 .ssh]# cat /root/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDdTtJ0KwD0sVbpPy8902xUSKcDZJ3goKUHesjAs5fFUxHy//m+HAHUKxsqDG6qMorZFNejPg8xZqA+dkQoQXeYOIjidHgs9rZsZE202BNTJF0HQO1a9X69ezr4txUquy3lUoZsdpiQWghdMBTHGAdGS+VcWDAzARGQ+sLlUaKO5fJZ2vVHbI+D+wYB7d9b/zRCkLb2xw7CdYBbKn5TUwHfC5nCu8Zd/cJtNX4QVeBhJpSH+PbBM17gcXysorHekWPZw9/YIKE84H18X0n8QAH5aZ2q10HI3c2IDuIIK4pUdL2vsjmsV7f1R6fC4ADTeSVqsJovSHINBTGf3cFnsIrupD3hDgU8daAzaoBXubHyE+L+RapSSMeL6T1s+GkEv5nDT8+z3r/9WRrAC3Ljz0BV7S80ON9yxJaBePLcx3cITuD1gvv3ZVZJJjelLLB95l8gd/EW1sH9tZY/V9oE2+4zzrkjDbWco9ZtvTlaqDc1zkv8IH+wd0Vm5JRsX4y6GiU= root@ip-172-31-37-159.us-east-2.compute.internal
[root@ip-172-31-37-159 .ssh]#
[root@ip-172-31-37-159 .ssh]#


In GitHub Add Deploy key and save in repository

on jenkins create credential (select username with SSH Key and then copy key here)

Save the job

Click on Build now

Repository will be cloned in jenkins workspace

You can go to job → workspace folder to see the files


Jenkins Triggers.
     To automatically execute a jenkins job, you will use Jenkins triggers
       Based on:

      Periodic time- schedule
      Whenever there is a commit in github repo
      A parent job can trigger execution of child job
      Execute a job from remote script

You will go to build triggered section in the job to set up a trigger for automatic execution of the job


Trigger prieodically


Go to Job Clone repo --> build trigger--> build preodically --> give */2 * * * * --> Save and build now


All build will be generated automatically every 2 mins


Build Triggers--> Poll SCM --> * * * * *

Build will be generated each time there is a chnage in the repository only.

Webhook:
Webhooks allow Jenkins to be notified when certain events happen on the repo. When the specified events happen, we’ll send a POST request to each of the URLs you provide.

GitHub hook trigger for GITScm polling

> Select the above option

Save the job and now go to git hub

Always save the job and then only  go to git hub, perform these steps

go to the repository setting
select webhooks on left side
delete if any exisitng webhook

click on create webhook on right side

provide following information:

Payload URL : jenkinsurl/github-webhook/ ===> http://3.140.252.165:8080/github-webhook/

Content type : select application/json

Secret: no need of any value

Which events would you like to trigger this webhook?

select first option -- Just the push event.

Select Active
click on add webhook.

now make some changes in repo,
go to jenkins--> you will see a new build has been created

Agenda Day3:
****************
Maven - features, commands of maven, plugins

Build automation tool,maven is plugin based 
Plugin Management
Configure Build tools in jenkins
Download plugins
Build pipeline - Upstream & downstream pipeline
Build plugins will be executed during the build and they should be configured in the <build/> element from the POM.
2 main plugin
core build plugin
Task 			plugin		Command
compile the code	complier	compile
test cases		surfier		test
package			package		package
clean the previous
build file		clean		clean
push your artifact	Deploy		Deploy

Review plugin : which when executed will generate reports - .xml .csv .html or .txt
or Reporting plugins will be executed during the site generation and they should be configured in the <reporting/> element from the POM. Because the result of a Reporting plugin is part of the generated site, 
Reporting plugins should be both internationalized and localized.
code review		pmd 		pmd:pmd
code coverage		coberatura	coberatura:coberatura()deprecated66
tools:
JACOCO
SONARQUBE		sonar:sonar

Test Report 		SurfireReports	test

MAVEN PROJECT :-

> src/main/java ==>
> src/test/java ==> test cases

POM.xml

> dependencies ==> information about s/w that are used by developer to write the code
> Build plugins ==> name and version of vaious plugins in order to perform build steps

Jenkins--> Manage Jenkins-->Global Tool configuration

Go to JDK section
In this give:
1. Uncheck -- install automatically
2. JDK name as myjava
3. Go to server type 
Execute the command :
alternatives --config java

Copy the path of java as shown by command output :

like this:  /usr/lib/jvm/java-11-openjdk-11.0.16.0.8-1.amzn2.0.1.x86_64

Also give number 1 for 
Enter to keep the current selection[+], or type selection number: 

Take the path and add it in jenkins for JAVA_HOME field

Save the changes.

Under GIT==> leave it same 

Under maven ==> lets install it automatically
Type mymaven and check the install automatically box.
Save the changes

GIT 		| ==> Compile	    ==>Code Review	   ==> Test		 ==> Code 	  ==>Package |     ==> Deploy Container
Source code  	| java classfile		pmd				        Coverage	     | 	
<java/maven>	| 1st job		2nd job		   3rd Job	         4th Job	  5th Job    |


Steps :
 1--> Download the build tool plugin --> Maven plugin is already available
 2--> Configure Maven Tool in jenkins

Manage Jenkins > Tool Config<before it was global tool config>

Name to the tool
version
[Add Maven with auto install and give name to maven] 

2ways to create jenkins pipeline :-
1 -> upstream and downstream pipeline using freestyle project : leraner who dont know the code/simple job and simple build pipeline
2 -> POD pipeline : for difficult

login as: ec2-user
Authenticating with public key "imported-openssh-key"
   ,     #_
   ~\_  ####_        Amazon Linux 2023
  ~~  \_#####\
  ~~     \###|
  ~~       \#/ ___   https://aws.amazon.com/linux/amazon-linux-2023
   ~~       V~' '->
    ~~~         /
      ~~._.   _/
         _/ _/
       _/m/'
Last login: Sat Oct 21 03:00:15 2023
[ec2-user@ip-172-31-37-159 ~]$ sudo su
[root@ip-172-31-37-159 ec2-user]# cd ~
[root@ip-172-31-37-159 ~]# cd /var/lib/jenkins
[root@ip-172-31-37-159 jenkins]# ls
config.xml
hudson.model.UpdateCenter.xml
hudson.plugins.git.GitTool.xml
hudson.plugins.gradle.Gradle.xml
hudson.plugins.mercurial.MercurialInstallation.xml
hudson.tasks.Ant.xml
hudson.tasks.Maven.xml
identity.key.enc
jenkins.install.InstallUtil.lastExecVersion
jenkins.install.UpgradeWizard.state
jenkins.model.JenkinsLocationConfiguration.xml
jenkins.mvn.GlobalMavenConfig.xml
jenkins.telemetry.Correlator.xml
jobs
logs
nodeMonitors.xml
nodes
org.jenkinsci.plugins.gitclient.JGitApacheTool.xml
org.jenkinsci.plugins.gitclient.JGitTool.xml
plugins
queue.xml.bak
secret.key
secret.key.not-so-secret
secrets
updates
userContent
users
workspace
[root@ip-172-31-37-159 jenkins]#
[root@ip-172-31-37-159 jenkins]# cat jenkins.mvn.GlobalMavenConfig.xml
<?xml version='1.1' encoding='UTF-8'?>
<jenkins.mvn.GlobalMavenConfig>
  <settingsProvider class="jenkins.mvn.DefaultSettingsProvider"/>
  <globalSettingsProvider class="jenkins.mvn.DefaultGlobalSettingsProvider"/>
</jenkins.mvn.GlobalMavenConfig>[root@ip-172-31-37-159 jenkins]#
[root@ip-172-31-37-159 jenkins]# cat hudson.tasks.Maven.xml
<?xml version='1.1' encoding='UTF-8'?>
<hudson.tasks.Maven_-DescriptorImpl>
  <installations>
    <hudson.tasks.Maven_-MavenInstallation>
      <name>MyMaven</name>
      <properties>
        <hudson.tools.InstallSourceProperty>
          <installers>
            <hudson.tasks.Maven_-MavenInstaller>
              <id>3.8.6</id>
            </hudson.tasks.Maven_-MavenInstaller>
          </installers>
        </hudson.tools.InstallSourceProperty>
      </properties>
    </hudson.tasks.Maven_-MavenInstallation>
  </installations>
</hudson.tasks.Maven_-DescriptorImpl>[root@ip-172-31-37-159 jenkins]# mvn --version
bash: mvn: command not found
[root@ip-172-31-37-159 jenkins]#


****************************************

CREATION OF COMPILE JOB
***********************************

1. new Job --1.complie-->freestyle project
2. Source code management --> select git
--->give git path ===> https://github.com/Sonal0409/DevOpsCodeDemo.git

3. build ==> select invoke top level maven targets
   select maven version===> mymaven
    goal ==> compile
4. save ==> build now 
So all the compiled files will be present at this location
==> look for this line in console output at the end on jenkins
Compiling 13 source files to /var/lib/jenkins/workspace/compile1/target/classes

5. Go to workspace on the left side of jenkins Job compile
In the folder go to ==> target folder==> go to classes/com/edurekademo
==> click on edurekademo==> got to utilities==> all class files will be there which have recently been compiled.
******************************
2nd JOB ==>Code Review
*********************

Jenkins--> new item--> Name= code Review==> freestyle project
==> source codemanagement==>select git==> 
give git repo name https://github.com/Sonal0409/DevOpsClassCodes

Step 2: build ==> invoke top level maven target==>
 select maven version==>mymaven ==> goal = pmd:pmd

save==> build now
==> click on build number and see the console

Goto Workspace on the left side of jenkins Job code review
In the folder go to ==> target folder ==> you will find pmd.xml file.

CONVERT FILE TO TREND REPORT
*******************************
 manage jenkins--> manage plugins--> available --> Search for warning next gen plugin--> install it.
Retsrat in case plugin fails installation.

Now go to the job Code Review==> go to post build actions ==> select recordcomplier warnings and static result analysis

Under tool ==> select PMD
under report file format ==> give path of pmd.xml file ie:  target/pmd.xml
or as mentioned in message below : copy **/pmd.xml  ( no quotes)

Save the file and build now.

After the build is successfull, you will see PMD Warnings

So you will see 12 new warning have been generated on the code.
Scroll down 
Under package click on first one to check warnings.

*********************************
JOB3: Testing --Unit Test report
********************************

1. jenkins--> new item--> Name= 3.unitTest==> freestyle project
==> source codemanagement==>select git==> give git repo name 
https://github.com/Sonal0409/DevOpsCodeDemo.git

2. build ==> invoke top level maven target==> select maven version==>mymaven ==> goal = test

3. Save and Build now.

4. Check the workspace

5. surefire-reports will be present

But we cannot understand them easily. So lets generate understandable reports by using Junit reports option under post build actions

6. Go back to job==> post build actions==> select junit test result job
==> give target/surefire-reports/*.xml  ===>under test report xml
This is path where xml files are there.
Here *.xml is as we want to use all the xml files

7. Save and build again

Go to build number ===> on left side you will see Test Result 
Click on it and you can see all pass and fail details of the tests

**************************
JOB4 : Code Coverage
************************

1. Go to jenkins--> new item--> Name= 4.CodeCoverage==> freestyle project
==> source codemanagement==>select git==> give git repo name https://github.com/Sonal0409/DevOpsClassCodes

2.  build ==> invoke top level maven target==> select mymaven
    goal = cobertura:cobertura -Dcobertura.report.format=xml

3.==> save==> build now
==> click on build number and see the console

4. go to Workspace ==> target/site/cobertura/coverage.xml  

The xml file will be there, But we cannot understand them easily. So lets generate understandable reports by downloading cobertura plugin

Go to manage jenkins--> manage plugins-->Available→ cobertura --> install it

Go back to the job--> post build actions--> select publish cobertura coverage report
Under cobertura xml pattern give ==> target/site/cobertura/coverage.xml   ==> you can take the path from below displayed text.

Save and build again
Click build number ==> on left side you will find Coverage Report==> click on it ==> we cna see the coverage report.

**********************************
Job5 Package Job
***************************

Go to jenkins--> new item--> Name= Package==> freestyle project
==> source codemanagement==>select git==> give git repo name https://github.com/Sonal0409/DevOpsClassCodes
 
build ==> invoke top level maven target==>mymaven

 goal = package

==> save==> build now
==> click on build number and see the console

==> go to workspace ==> target/addressbook.war


**************
Connecting all the 5 jobs so that each job can be triggered:


Go to manage plugins → available section

Search for build pipeline plugin

Click on the checkbox and click on Install without restart

Plugin will be installed.

Lets build the pipeline:

*****************

Day4:
********************

******************************
Pipeline as a code
**************************
Lets create a pipeline using code:

Create a new job ==> select project as pipeline

pipeline{
    
    tools{
        jdk 'myjava'
        maven 'mymaven'
    }
    
    agent any
    
    stages{

        stage('1.CloneRepo')
        {
           
            steps{
                git 'https://github.com/Sonal0409/DevOpsCodeDemo.git'
            }
        }
        stage('2.Compile the code')
        {
             
            steps{
             sh 'mvn compile'
            }
        }
        stage('3.Code Review'){
            steps{
            sh 'mvn pmd:pmd'
            }
        }
        
        stage('4.Unit Testing'){
            steps{
                sh 'mvn test'
            }
            post{
                success{
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('5.Code Coverage'){
            steps{
            sh   'mvn cobertura:cobertura -Dcobertura.report.format=xml'
            }
            post{
                success{
                    cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'target/site/cobertura/coverage.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
                }
            }
        }
        stage('6.Package'){
            steps{
                sh 'mvn package'
            }
        }
    }
}


Day 5: Agenda:

> Jenkinsfile

It is a simple text file with no extension
This file contains declarative pipeline code for CI/CD pipeline
The name of this file is always Jenkinsfile
This will is maintained in the root directory of your project repo on SCM tool
Every team member can now make changes to the pipeline code without logging on the jenkins server.
In the github we can also maintain every version of pipeline code
We write the pipeline code in IDE and push the Jenkinsfile in the repository
In jenkins you will create a job, that will fetch the Jenkinsfile and jenkins will execute the pipeline for you.

Demo:

Click on new Item → give the job name as JenkinsfileDemo → Select pipeline project→ press OK
In the job template → click on pipeline tab → select the dropdown option as Pipeline script from SCM
Select SCM as → git
Repository URL? ⇒ https://github.com/Sonal0409/DevOpsCodeDemo.git

We will also add a trigger → Go to Build triggers tab above→ POLL SCM → * * * * *

So that if there is any commit, my pipeline should get executed everytime.


> MultiBranch Pipeline

Basically we have many branches in github for a repository
Each branch may have separate set of tasks/jobs to be executed
Whenever a branch is created on the repo, Make sure the branch has a Jenkinsfile init
In the Jenkinsfile you write the code which is needed to execute certain tasks related to the branch
we will set up a job in jenkins that will scan every branch of your github repository
Whichever branch has the jenkinsfile present on it
            > for that branch a jenkins job will be created with same name as branch name  and Jenkinsfile code will be executed

Whichever branch of your repo does not have Jenkinsfile on it. No job will be create for it.


Demo:

Click on new item→ create job -> give name as MultibranchdemoJob → select the template as Multibranch Pipeline → press Ok

In General section → give Display name as :  Multibranch Pipeline

In branch Sources section → Click on Add source → select git

Give git  Project Repository -> https://github.com/Sonal0409/MultiBranchDemo.git

Nomore changes and save the job.

Jenkins will automatically scan the branches of the repo and create pipeline jobs.

Click on multibranch pipeline job name and you will see the 3 jobs created for 3 branches.

Master and slave set up:

1. Master machine and change the Jenkisn URL in Jenkins configure system section

Manage Jenkins --> configure system --> scroll down --> Jenkins Location-->give the latest Jenkins URL ==> save it

update the latest URL over there


2. For master and slave to communicate , you will need Agent port

By default it is disabled in jenkins. You need to enable it

Manage Jenkins --> Configure global security --> scroll down to Agent section ==> select random ==> save it


Slave set up:
***********************

Install the following tools:

Git installation:

yum install git -y


JAVA Installation

 yum install java-1.8.0-openjdk-devel

Maven Installation:
***************
yum install maven -y


Create the root directory/workspace on the slave for master to place the rmeote files and output files
*******************************
cd /tmp

mkdir jenkinsdir

We need to give permission to this directory, so that master can read and write int this directory

 chmod -R 777 /tmp/jenkinsdir

This is the path of directory

/tmp/jenkinsdir


******************************************

Connect Master to the Slave

*****************************************

Manage jenkins--> Manage nodes & clouds --> on left side click on New node

Give name as Jnekinsslave --> select permanent agent --> click on create


Name: already populated

Description: Slave is of Lunix OS

Number of executors: 1

here executors means, jobs that can be executed on the slave at a time

Remote root directory: /tmp/jenkinsdir

Label: jenkinsSlave

Usage: Only build jobs with label expression matching this node

Launch method:

how do you want to connect slave to master

1. Launch method : select==> launch agents via ssh

Host : private ip address of slave

Credentials:
Click on Add button --> click on jenkins button

Kind: SSH username with private key

id: jenkisnslave

description: slave credentials

Username: ec2-user

Private Key :  click on Enter directly ==> click on add button

Open the pem file of slave server using notepad in your downloads folder

and copy all the contents ==> CTL A + CTL C

and paste it under private key step

Click on add button


In credentials drop down select the credentials


Host Key Verification Strategy

> select Non verifying verification strategy

Availability : keep this node online as much as psosible

Tool location
********************

Location of tool git and java on the slave

git :  /usr/bin/git

java: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.332.b09-1.amzn2.0.2.x86_64

********************************************
Windows:
************************************
Master and Slave Set up

restart the instance.
Restart the jenkins server
now take public ip and loginto jenkins

Step 1: Go to Manage Jenkins ---> CONFIGURE SYSTEM ---> Check the Jenkins URL is same as URL of browser --> Save
Step 2: Go to Manage Jenkins---> CONFIGURE GLOBAL SECURITY --> Scroll down to AGENTS-->select RANDOM radiobutton--> Save
Step 3: Go to Manage Jenkins---> MAnage Nodes and Clouds  --> New Node

Select New Node--> give name as Winslave--> select radio button permanamet Agent

Name : winslave
Description: give windows 10 machine 
==> # of executors = 1 ==> means number of jobs that we want to run on this slave node. Let it be 1 for now
===> Remote root directory ==> C:\jenkinsdir
Location of a directory folder on your windows machine , so that jenkins can create a workspace folder and store all the files. As we have seen earlier while executiong jobs.
For this --> got to C drive and create an emapty folder.
C:\jenkinsdir

====>  Label : win_slave ==> this is like a tag to slave machine. This is how we will identify the slave machine--> remeber this

===> Usage: 
Select 2nd option: Only build jobs with label expressionmatching the job :
This means for which ever job we will give label as win_slave that job only will run on this job.

===> Launch Method : select option : Launch agent by connecting to master.

Scroll down

Add tools

Add git path as C:\Program Files\Git\cmd\git.exe
Add java path as C:\Program Files (x86)\Java\jdk1.8.0_191

SAVE the job.

Now go to win_slave ==> download the agent.jar file and put it in your jenkinsdir folder.

Copy the path and change the public ip in below path
java -jar agent.jar -jnlpUrl http://3.139.60.71:8080/computer/winslave/slave-agent.jnlp -secret 61e8e20badd531b48caeffac8d686f182eb2d77a1c303ee39c5db9d00117c0be -workDir "C:\jenkinsdir"

Go to bash and start jenkins, refresh instance
Go to cmd prompt
change to cd c:\jenkinsdir
copy the above jenkins agent path
System will get connected.

***************************************
RUN a job on Agent

Go to Dashboard

Select the package job---> configure --> GENERAL --> click on Restrict where this project can be run and enter win_slave  

SAVE THE JOB

CLICK on BUILD NOW -- to start the build

CLick on build number--> got to console --to check it is executing on AGent

Go to C folder-->jekinsdir---> C:\jenkinsdir\workspace\package\target==> 
you will see addressbook.war file.
===============================================================================================================================

1. Setup the node

> create an Ec2 server and connect to the node server

JFYI --. changing the name of the node
hostname JENKINSNODE
sudo su -


> Install java

sudo amazon-linux-extras install java-openjdk11 -y

> Install git

yum install git -y

> create a Remote root directory

cd /tmp
mkdir jenkinsdir

PATH of the directory is /tmp/jenkinsdir

> give read write execute permissions to this directory  --> /tmp/jenkinsdir

	chmod -R 777 /tmp/jenkinsdir
******************************************

2. Setup the jenkins Controller

> update the jenkins URL in configure system

Manage Jenkins --> Configure System --> Scroll down to Jenkins URL --. update the value with latest jenkisn URL -> Save the changes

> open the Agent port  [ this step is optional for linux agents and mandatory for windows agent]

Manage Jenkins-->Configure Global Security--> scroll to agent section --> select randome--> save th changes

> Add the node to the controller

Manage Jenkins --> Manage nodes and clouds --> Add Node --> Give a name --> select Permanent agent--> press ok

Description : Amazon linux2 server

Number of executors: 1

Remote root directory: /tmp/jenkinsdir

Labels: linux_node

Usage: Only build the jobs with matching label expression

Launch method : Launch agents via SSH

Host : agnets private ip -> 172.31.19.75

Credentials --> click on ADD --> click on jenkins

KIND: SSH username with private key

ID : Agent1
Description: Agent1

Username: ec2-user

Enter private key file

press ok

Select the credentials


Host Key Verification Strategy : select the 4th option --> non verifying verification startegy

Set up Windows Agent:

On windows server 

make sure java 11 is installed

Create remote root directory

C:\jenkinsdir

2. Setup the jenkins Controller

> update the jenkins URL in configure system

Manage Jenkins --> Configure System --> Scroll down to Jenkins URL --. update the value with latest jenkisn URL -> Save the changes

> open the Agent port  [ this step is optional for linux agents and mandatory for windows agent]

Manage Jenkins-->Configure Global Security--> scroll to agent section --> select randome--> save th changes

> Add the node to the controller

Manage Jenkins --> Manage nodes and clouds --> Add Node --> Give a name --> select Permanent agent--> press ok
